# Booking Journey Monorepo - LLM Context

## Project Overview
This is a full-stack booking journey application built with NestJS microservices architecture and React frontend, based on the MeetingPackage.com API specification. The system allows users to search for meeting venues, view availability, and make bookings.

## Architecture
- **Monorepo Structure**: Nx-based monorepo with multiple applications and shared libraries
- **Backend**: NestJS microservices with TCP transport
- **Frontend**: React with TypeScript, Tailwind CSS, and shadcn/ui components
- **Database**: PostgreSQL as primary database
- **Caching**: Redis for performance optimization
- **Containerization**: Docker with Docker Compose for development and deployment

## Core Services
1. **API Gateway** (Port 3000) - Routes requests to microservices, Swagger documentation
2. **Search Service** (Port 3001) - Venue search with geolocation
3. **Availability Service** (Port 3002) - Room and package availability checking
4. **Content Service** (Port 3003) - Venue details, rooms, and addons
5. **Order Service** (Port 3004) - Booking orders and messaging
6. **Customer Service** (Port 3005) - Customer management

## API Endpoints (16 total)
### Search & Content
- GET /api/venues - Search venues by location
- GET /api/venues/{id} - Get venue details
- GET /api/venues/{id}/addons - Get venue addons
- GET /api/rooms/{id} - Get room details

### Availability
- GET /api/availability/venues - Search available venues
- GET /api/availability/venues/{id} - Get venue room availability
- GET /api/availability/venues/{id}/packages - Get venue package availability
- GET /api/availability/venues/{id}/day - Get day availability
- GET /api/availability/meetingrooms/{id} - Get meeting room availability
- GET /api/availability/packages/{id} - Get package availability

### Orders
- POST /api/orders - Create new order
- GET /api/orders/{id} - Get order details
- PUT /api/orders/{id} - Update order status
- GET /api/orders/{id}/messages - Get order messages
- POST /api/orders/{id}/messages - Send order message

### Customers
- POST /api/customers - Create new customer

## Database Schema (PostgreSQL)
### Core Tables
- **venues** - Meeting venues and event spaces
- **rooms** - Meeting rooms within venues
- **packages** - Event packages offered by venues
- **addons** - Additional services and products
- **customers** - Customer profiles and information
- **orders** - Booking orders and reservations
- **order_items** - Order line items
- **order_messages** - Order communication

## Key Technologies
- **Backend**: NestJS, TypeORM, PostgreSQL, Redis, Swagger
- **Frontend**: React 18, TypeScript, Tailwind CSS, shadcn/ui, React Query, React Router
- **Testing**: Jest (unit), Playwright (E2E)
- **DevOps**: Docker, Docker Compose, Nx build system
- **Communication**: TCP microservices, REST API

## Development Patterns
- **Microservices**: Each service has its own database entities and business logic
- **Shared Types**: Common TypeScript interfaces in libs/shared/types
- **Error Handling**: Consistent error responses across all services
- **Validation**: Class-validator for request validation
- **Documentation**: Swagger/OpenAPI for API documentation

## File Structure

# Booking Journey Monorepo - AI Context

## Project Overview

This is a full-stack booking journey application built with a microservices architecture using NestJS for the backend and React for the frontend. The application allows users to search for meeting venues, check availability, and book rooms or packages.

## Architecture

### Frontend (React SPA)
- Single Page Application built with React, React Router, and React Query
- State management using React Context API
- UI components styled with Tailwind CSS
- Smooth page transitions and loading states for enhanced UX
- Responsive design for all device sizes

### Backend (NestJS Microservices)
- API Gateway: Entry point for all client requests
- Search Service: Handles venue search functionality
- Availability Service: Manages room and package availability
- Content Service: Provides venue details, rooms, and content
- Order Service: Handles booking orders and reservations
- Customer Service: Manages customer data and profiles

### Database
- PostgreSQL for persistent storage
- Redis for caching

## Key Concepts

### Booking Flow
1. User searches for venues based on location, date, time, and number of delegates
2. User selects a venue and views available rooms or packages
3. User selects a room or package and adds optional services
4. User provides customer details
5. User completes payment
6. User receives booking confirmation

### Data Models

#### Venue
- Basic information about meeting venues
- Location data (address, coordinates)
- Facilities and amenities
- Images and descriptions

#### Room
- Room details (name, capacity, dimensions)
- Equipment and facilities
- Pricing information
- Availability constraints

#### Package
- Package details (name, description)
- Included rooms and services
- Pricing information
- Availability constraints

#### Order
- Customer information
- Selected room or package
- Additional services
- Payment details
- Status information

## Development Guidelines

### Frontend
- Use React functional components with hooks
- Implement proper loading states and error handling
- Follow the existing page transition patterns
- Maintain responsive design across all components
- Use React Query for data fetching and caching
- Follow the established folder structure

### Backend
- Follow NestJS module structure
- Implement proper validation and error handling
- Use DTOs for request/response contracts
- Follow RESTful API design principles
- Implement proper logging and monitoring

## Testing Strategy

### Frontend
- Unit tests for components and hooks
- Integration tests for pages
- E2E tests for critical user flows

### Backend
- Unit tests for services and controllers
- Integration tests for API endpoints
- E2E tests for microservice communication

## Deployment

- Docker containers for all services
- Kubernetes for orchestration
- CI/CD pipeline for automated testing and deployment
